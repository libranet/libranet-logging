# This is a comment.
# syntax-documentation:
#  - https://python-poetry.org/docs/pyproject
#  - https://flit.readthedocs.io/en/latest/pyproject_toml.html
#  - https://toml.io/en/
#
# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.


[build-system]
requires = ["poetry-core>=1.1.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"


[tool.bandit]
# bandit does not use this config by default.
# You need to invoke "bandit --configfile pyproject.toml"
# see https://github.com/PyCQA/bandit/issues/318"
# baseline = "etc/bandit-baseline.json"
exclude_dirs = [".venv", "var"]
recursive = true
skips = [
    # see https://bandit.readthedocs.io/en/1.7.3/plugins/index.html#plugin-id-groupings
    # "B101", # assert_used
]
targets = ["docs", "src", "tests"]

[tool.bandit.assert_used]
skips = ["*/test_*.py"]


[tool.black]
line-length = 120
include = '\.py$'          # regex -> single-quotes
target-version = ["py311"]


[tool.coverage.html]
directory = "var/html/coverage"

[tool.coverage.xml]
output = "var/html/coverage/coverage.xml"

[tool.coverage.report]
# cfr. https://coverage.readthedocs.io/en/coverage-4.2/excluding.html
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
include = ["src/*"]

[tool.coverage.run]
branch = true
data_file = "var/cache/coverage/coverage.db" # defaults to .coverage


[tool.flake8]
max_line_length = 121
per_file_ignores = [
    "__init__.py:F401", # F401: imported but unused
]


[tool.isort]
include_trailing_comma = true # corresponds to -tc flag
known_third_party = []
line_length = 120             # corresponds to -w  flag
multi_line_output = 3         # corresponds to -m  flag
skip_glob = '^((?!py$).)*$'   # isort all Python files


[tool.mypy]
# cfr https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
cache_dir = "var/cache/mypy"
check_untyped_defs = true
# disallow_untyped_defs = true
exclude = "^bin/"
ignore_missing_imports = true
# mypy_path = ["etc/ipython/startup", "src", "tests"]
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true


[tool.nox]
envdir = "var/cache/nox"


[tool.poetry]
name = "libranet-logging"
version = "1.5"
license = "MIT"
description = "Easy-to-use logging-configuration using a logging.yml-file"
readme = "docs/readme.md"
authors = ["Wouter Vanden Hove <wouter@libranet.eu>"]
maintainers = ["Wouter Vanden Hove <wouter@libranet.eu>"]
homepage = "https://github.com/libranet/libranet-logging"
repository = "https://github.com/libranet/libranet-logging"
documentation = "https://libranet-logging.readthedocs.io/en/latest/"
keywords = ["libranet", "logging", "filters", "handlers", "loggers", "yaml"]
classifiers = [
    # Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
packages = [{ include = "libranet_logging", from = "src" }]


[tool.poetry.dependencies]
python = ">=3.8.0"
colorlog = ">=6.7"
jsonschema = ">=4.23"
logging-tree = ">=1.9"
pyyaml = ">=6.0"


# sitecustomize = ["sitecustomize-entrypoints"]

# [project.optional-dependencies]
# all = [
# "sitecustomize-entrypoints = >=1.1"
# ]


# [tool.poetry.group.dev]
# optional = true
[tool.poetry.group.dev.dependencies]
absolufy-imports = ">=0.3"
black = { version = ">=22.1", allow-prereleases = true }
flake8 = ">=5.0"
flake8-bugbear = ">=23.2"
flake8-docstrings = ">=1.6"
flake8-pyproject = ">=1.2"
isort = ">=5.10"
pre-commit = ">=2.20"
pre-commit-hooks = ">=4.4"
pylint = ">=2.15"
ruff = ">=0.0"
toml-cli = ">=0.7.0"

# [tool.poetry.group.dist]
# optional = true
[tool.poetry.group.dist.dependencies]
pyroma = ">=4.2"
twine = ">=4.0.2"

# [tool.poetry.group.docs]
# optional = true
[tool.poetry.group.docs.dependencies]
autoapi = ">=2.0"
recommonmark = ">=0.7"
Sphinx = ">=4.4"
sphinx-autoapi = ">=1.8"
sphinx-rtd-theme = ">=1.0"

# [tool.poetry.group.ipython]
# optional = true
[tool.poetry.group.ipython.dependencies]
ipdb = ">=0.13"
ipython = ">=8.4"

# [tool.poetry.group.profiling]
# optional = true
[tool.poetry.group.profiling.dependencies]
importtime-waterfall = ">=1.0"
tuna = ">=0.5"

# [tool.poetry.group.security]
# optional = true
[tool.poetry.group.security.dependencies]
bandit = { extras = ["toml"], version = ">=1.7" }
safety = ">=2.3"

# [tool.poetry.group.testing]
# optional = true
[tool.poetry.group.testing.dependencies]
pytest = ">=7.0"
pytest-clarity = "^1.0"
pytest-click = ">=1.1"
pytest-cov = ">=4.0"
pytest-mock = ">=3.10"
pytest-xdist = ">=3.2"

# [tool.poetry.group.typing]
# optional = true
[tool.poetry.group.typing.dependencies]
lxml = { version = ">=4.9", optional = true, allow-prereleases = false } # mypy coverage-report
mypy = ">=0.9"
types-pyyaml = ">=6.0"


[tool.poetry.plugins."sitecustomize"]
# https://python-poetry.org/docs/pyproject/#plugins
# https://github.com/Darsstar/sitecustomize-entrypoints/blob/main/src/sitecustomize/__init__.py
# libranet_logging_pyyaml = "libranet_logging.yaml:add_constructor"
# libranet_logging_ruaml = "libranet_logging.yaml:add_constructor"


[tool.poetry.urls]
Issues = "https://github.com/libranet/libranet-logging/issues"
Changelog = "https://github.com/libranet/libranet-logging/blob/main/docs/changes.rsts"


# [tool.poetry-dynamic-versioning]
# # cfr https://github.com/mtkennerly/poetry-dynamic-versioning
# enable = true
# vcs = "git"
# style = "semver"

# [tool.poetry-dynamic-versioning.substitution]
# files = ["src/*/__init__.py", "src/*/__version__.py", "docs/changes.rst"]


[tool.pylint.design]
# complete pylint-config, see https://github.com/PyCQA/pylint/blob/main/pylintrc
exclude-too-few-public-methods = "pydantic.*"
max-attributes = 75                           # default is 11

[tool.pylint.format]
max-line-length = 120
good-names = [
    "i",  # counter in loop
    "ok", # status
    "ts", # timestamp or timeseries object
    "t0",
    "t1",
]

[tool.pylint.messages_control]
disable = [
    "R0402", # consider-using-from-import
    "R0801", # duplicate-code
    "W0703", # broad-except
    "W1203", # logging-fstring-interpolation
    "W0511", # fixme / todo
    "C0116", # missing-function-docstring
]

[tool.pylint.type_check]
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules = []


[tool.pytest.ini_options]
markers = ["integration", "unit", "slow"]
testpaths = ["tests"]
# the junit-report is used to report coverage in gitlab
addopts = "--junit-xml='var/cache/coverage/pytest.xml'"
cache_dir = "var/cache/pytest"
log_cli = false # enable to show log-output
log_cli_level = "NOTSET"
filterwarnings = [
    # "ignore:Coverage disabled via --no-cov switch!:pytest.PytestWarning:pytest_cov.plugin",
    # "ignore::DeprecationWarning", # use of pgk_rescources in cerberus
]


[tool.tox]
# see https://tox.wiki/en/3.5.0/example/basic.html#pyproject-toml-tox-legacy-ini
legacy_tox_ini = """
[tox]
envlist = py{39,310,311}
# envlist = [py39, py310, py311]
isolated_build = True
toxworkdir = var/cache/tox

[testenv]
allowlist_externals =
    make
    poetry
skip_install = true
commands =
    make install
    pytest --pdb --exitfirst
"""


[tool.ruff]
cache-dir = "var/cache/ruff" # relative to this file
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.

select = ["E", "F"]
ignore = []
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "D", "E", "F"]
unfixable = []
# # Exclude a variety of commonly ignored directories.
# exclude = [
#     # ".bzr",
#     # ".direnv",
#     # ".eggs",
#     # ".git",
#     # ".hg",
#     # ".mypy_cache",
#     # ".nox",
#     # ".pants.d",
#     # ".pytype",
#     # ".ruff_cache",
#     # ".svn",
#     # ".tox",
#     # ".venv",
#     # "__pypackages__",
#     # "_build",
#     # "build",
#     # "dist",
#     "venv",
#     "var",
# ]
# per-file-ignores = {}
# Same as Black.
line-length = 120
respect-gitignore = true

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff."per-file-ignores"]
"etc/ipython/*/ipython_*config.py" = ["E501"]


[tool.ruff.flake8-quotes]
# cfr https://github.com/python-poetry/cleo/blob/main/pyproject.toml
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.sort.config]
# https://pypi.org/project/poetry-sort/
# https://github.com/celsiusnarhwal/poetry-sort
auto = true
case-sensitive = false
sort-python = false
format = true


# [[tool.uv.index]]
# name = "testpypi"
# url = "https://test.pypi.org/simple/"
# publish-url = "https://test.pypi.org/legacy/"